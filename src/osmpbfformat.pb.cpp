// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmpbfformat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osmpbfformat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace OSM_PBF_FORMAT {

void protobuf_ShutdownFile_osmpbfformat_2eproto() {
  delete CompressedBlockHeader::default_instance_;
  delete CompressedBlock::default_instance_;
  delete FileHeader::default_instance_;
  delete Block::default_instance_;
  delete StringList::default_instance_;
  delete Group::default_instance_;
  delete SparseNode::default_instance_;
  delete DenseNode::default_instance_;
  delete Way::default_instance_;
  delete Relation::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_osmpbfformat_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_osmpbfformat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CompressedBlockHeader::default_instance_ = new CompressedBlockHeader();
  CompressedBlock::default_instance_ = new CompressedBlock();
  FileHeader::default_instance_ = new FileHeader();
  Block::default_instance_ = new Block();
  StringList::default_instance_ = new StringList();
  Group::default_instance_ = new Group();
  SparseNode::default_instance_ = new SparseNode();
  DenseNode::default_instance_ = new DenseNode();
  Way::default_instance_ = new Way();
  Relation::default_instance_ = new Relation();
  CompressedBlockHeader::default_instance_->InitAsDefaultInstance();
  CompressedBlock::default_instance_->InitAsDefaultInstance();
  FileHeader::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  StringList::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  SparseNode::default_instance_->InitAsDefaultInstance();
  DenseNode::default_instance_->InitAsDefaultInstance();
  Way::default_instance_->InitAsDefaultInstance();
  Relation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osmpbfformat_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_osmpbfformat_2eproto_once_);
void protobuf_AddDesc_osmpbfformat_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_osmpbfformat_2eproto_once_,
                 &protobuf_AddDesc_osmpbfformat_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osmpbfformat_2eproto {
  StaticDescriptorInitializer_osmpbfformat_2eproto() {
    protobuf_AddDesc_osmpbfformat_2eproto();
  }
} static_descriptor_initializer_osmpbfformat_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CompressedBlockHeader::kBlockTypeFieldNumber;
const int CompressedBlockHeader::kBlockSizeFieldNumber;
#endif  // !_MSC_VER

CompressedBlockHeader::CompressedBlockHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CompressedBlockHeader::InitAsDefaultInstance() {
}

CompressedBlockHeader::CompressedBlockHeader(const CompressedBlockHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedBlockHeader::SharedCtor() {
  _cached_size_ = 0;
  block_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedBlockHeader::~CompressedBlockHeader() {
  SharedDtor();
}

void CompressedBlockHeader::SharedDtor() {
  if (block_type_ != &::google::protobuf::internal::kEmptyString) {
    delete block_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CompressedBlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompressedBlockHeader& CompressedBlockHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

CompressedBlockHeader* CompressedBlockHeader::default_instance_ = NULL;

CompressedBlockHeader* CompressedBlockHeader::New() const {
  return new CompressedBlockHeader;
}

void CompressedBlockHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_type()) {
      if (block_type_ != &::google::protobuf::internal::kEmptyString) {
        block_type_->clear();
      }
    }
    block_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CompressedBlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_size;
        break;
      }

      // required int32 block_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_size_)));
          set_has_block_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedBlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_type = 1;
  if (has_block_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_type(), output);
  }

  // required int32 block_size = 3;
  if (has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->block_size(), output);
  }

}

int CompressedBlockHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_type = 1;
    if (has_block_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_type());
    }

    // required int32 block_size = 3;
    if (has_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_size());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedBlockHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompressedBlockHeader*>(&from));
}

void CompressedBlockHeader::MergeFrom(const CompressedBlockHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_type()) {
      set_block_type(from.block_type());
    }
    if (from.has_block_size()) {
      set_block_size(from.block_size());
    }
  }
}

void CompressedBlockHeader::CopyFrom(const CompressedBlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedBlockHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CompressedBlockHeader::Swap(CompressedBlockHeader* other) {
  if (other != this) {
    std::swap(block_type_, other->block_type_);
    std::swap(block_size_, other->block_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CompressedBlockHeader::GetTypeName() const {
  return "OSM_PBF_FORMAT.CompressedBlockHeader";
}


// ===================================================================

#ifndef _MSC_VER
const int CompressedBlock::kUncompressedDataSizeFieldNumber;
const int CompressedBlock::kUncompressedDataFieldNumber;
const int CompressedBlock::kZlibCompressedDataFieldNumber;
#endif  // !_MSC_VER

CompressedBlock::CompressedBlock()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CompressedBlock::InitAsDefaultInstance() {
}

CompressedBlock::CompressedBlock(const CompressedBlock& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedBlock::SharedCtor() {
  _cached_size_ = 0;
  uncompressed_data_size_ = 0;
  uncompressed_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zlib_compressed_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedBlock::~CompressedBlock() {
  SharedDtor();
}

void CompressedBlock::SharedDtor() {
  if (uncompressed_data_ != &::google::protobuf::internal::kEmptyString) {
    delete uncompressed_data_;
  }
  if (zlib_compressed_data_ != &::google::protobuf::internal::kEmptyString) {
    delete zlib_compressed_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CompressedBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompressedBlock& CompressedBlock::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

CompressedBlock* CompressedBlock::default_instance_ = NULL;

CompressedBlock* CompressedBlock::New() const {
  return new CompressedBlock;
}

void CompressedBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uncompressed_data_size_ = 0;
    if (has_uncompressed_data()) {
      if (uncompressed_data_ != &::google::protobuf::internal::kEmptyString) {
        uncompressed_data_->clear();
      }
    }
    if (has_zlib_compressed_data()) {
      if (zlib_compressed_data_ != &::google::protobuf::internal::kEmptyString) {
        zlib_compressed_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CompressedBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uncompressed_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uncompressed_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uncompressed_data_size;
        break;
      }

      // required int32 uncompressed_data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncompressed_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uncompressed_data_size_)));
          set_has_uncompressed_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zlib_compressed_data;
        break;
      }

      // optional bytes zlib_compressed_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zlib_compressed_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zlib_compressed_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uncompressed_data = 1;
  if (has_uncompressed_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uncompressed_data(), output);
  }

  // required int32 uncompressed_data_size = 2;
  if (has_uncompressed_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uncompressed_data_size(), output);
  }

  // optional bytes zlib_compressed_data = 3;
  if (has_zlib_compressed_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->zlib_compressed_data(), output);
  }

}

int CompressedBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uncompressed_data_size = 2;
    if (has_uncompressed_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uncompressed_data_size());
    }

    // optional bytes uncompressed_data = 1;
    if (has_uncompressed_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uncompressed_data());
    }

    // optional bytes zlib_compressed_data = 3;
    if (has_zlib_compressed_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->zlib_compressed_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompressedBlock*>(&from));
}

void CompressedBlock::MergeFrom(const CompressedBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uncompressed_data_size()) {
      set_uncompressed_data_size(from.uncompressed_data_size());
    }
    if (from.has_uncompressed_data()) {
      set_uncompressed_data(from.uncompressed_data());
    }
    if (from.has_zlib_compressed_data()) {
      set_zlib_compressed_data(from.zlib_compressed_data());
    }
  }
}

void CompressedBlock::CopyFrom(const CompressedBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CompressedBlock::Swap(CompressedBlock* other) {
  if (other != this) {
    std::swap(uncompressed_data_size_, other->uncompressed_data_size_);
    std::swap(uncompressed_data_, other->uncompressed_data_);
    std::swap(zlib_compressed_data_, other->zlib_compressed_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CompressedBlock::GetTypeName() const {
  return "OSM_PBF_FORMAT.CompressedBlock";
}


// ===================================================================

#ifndef _MSC_VER
const int FileHeader::kParserMustSupportFieldNumber;
const int FileHeader::kParseMayExploitFieldNumber;
#endif  // !_MSC_VER

FileHeader::FileHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FileHeader::InitAsDefaultInstance() {
}

FileHeader::FileHeader(const FileHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FileHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileHeader::~FileHeader() {
  SharedDtor();
}

void FileHeader::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FileHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileHeader& FileHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

FileHeader* FileHeader::default_instance_ = NULL;

FileHeader* FileHeader::New() const {
  return new FileHeader;
}

void FileHeader::Clear() {
  parser_must_support_.Clear();
  parse_may_exploit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string parser_must_support = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parser_must_support:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parser_must_support()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parser_must_support;
        if (input->ExpectTag(42)) goto parse_parse_may_exploit;
        break;
      }

      // repeated string parse_may_exploit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parse_may_exploit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parse_may_exploit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parse_may_exploit;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string parser_must_support = 4;
  for (int i = 0; i < this->parser_must_support_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parser_must_support(i), output);
  }

  // repeated string parse_may_exploit = 5;
  for (int i = 0; i < this->parse_may_exploit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->parse_may_exploit(i), output);
  }

}

int FileHeader::ByteSize() const {
  int total_size = 0;

  // repeated string parser_must_support = 4;
  total_size += 1 * this->parser_must_support_size();
  for (int i = 0; i < this->parser_must_support_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parser_must_support(i));
  }

  // repeated string parse_may_exploit = 5;
  total_size += 1 * this->parse_may_exploit_size();
  for (int i = 0; i < this->parse_may_exploit_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parse_may_exploit(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileHeader*>(&from));
}

void FileHeader::MergeFrom(const FileHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  parser_must_support_.MergeFrom(from.parser_must_support_);
  parse_may_exploit_.MergeFrom(from.parse_may_exploit_);
}

void FileHeader::CopyFrom(const FileHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHeader::IsInitialized() const {

  return true;
}

void FileHeader::Swap(FileHeader* other) {
  if (other != this) {
    parser_must_support_.Swap(&other->parser_must_support_);
    parse_may_exploit_.Swap(&other->parse_may_exploit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FileHeader::GetTypeName() const {
  return "OSM_PBF_FORMAT.FileHeader";
}


// ===================================================================

#ifndef _MSC_VER
const int Block::kStringListFieldNumber;
const int Block::kGroupListFieldNumber;
const int Block::kLatlonGranularityFieldNumber;
const int Block::kOffsetOfLatitudeFieldNumber;
const int Block::kOffsetOfLongitudeFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  string_list_ = const_cast< ::OSM_PBF_FORMAT::StringList*>(
      ::OSM_PBF_FORMAT::StringList::internal_default_instance());
#else
  string_list_ = const_cast< ::OSM_PBF_FORMAT::StringList*>(&::OSM_PBF_FORMAT::StringList::default_instance());
#endif
}

Block::Block(const Block& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  string_list_ = NULL;
  latlon_granularity_ = 100;
  offset_of_latitude_ = GOOGLE_LONGLONG(0);
  offset_of_longitude_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete string_list_;
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Block& Block::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_list()) {
      if (string_list_ != NULL) string_list_->::OSM_PBF_FORMAT::StringList::Clear();
    }
    latlon_granularity_ = 100;
    offset_of_latitude_ = GOOGLE_LONGLONG(0);
    offset_of_longitude_ = GOOGLE_LONGLONG(0);
  }
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .OSM_PBF_FORMAT.StringList string_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_list;
        break;
      }

      // repeated .OSM_PBF_FORMAT.Group group_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_list;
        if (input->ExpectTag(136)) goto parse_latlon_granularity;
        break;
      }

      // optional int32 latlon_granularity = 17 [default = 100];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latlon_granularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latlon_granularity_)));
          set_has_latlon_granularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_offset_of_latitude;
        break;
      }

      // optional int64 offset_of_latitude = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_of_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_of_latitude_)));
          set_has_offset_of_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_offset_of_longitude;
        break;
      }

      // optional int64 offset_of_longitude = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_of_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_of_longitude_)));
          set_has_offset_of_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .OSM_PBF_FORMAT.StringList string_list = 1;
  if (has_string_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->string_list(), output);
  }

  // repeated .OSM_PBF_FORMAT.Group group_list = 2;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->group_list(i), output);
  }

  // optional int32 latlon_granularity = 17 [default = 100];
  if (has_latlon_granularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->latlon_granularity(), output);
  }

  // optional int64 offset_of_latitude = 19 [default = 0];
  if (has_offset_of_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->offset_of_latitude(), output);
  }

  // optional int64 offset_of_longitude = 20 [default = 0];
  if (has_offset_of_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->offset_of_longitude(), output);
  }

}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .OSM_PBF_FORMAT.StringList string_list = 1;
    if (has_string_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_list());
    }

    // optional int32 latlon_granularity = 17 [default = 100];
    if (has_latlon_granularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latlon_granularity());
    }

    // optional int64 offset_of_latitude = 19 [default = 0];
    if (has_offset_of_latitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset_of_latitude());
    }

    // optional int64 offset_of_longitude = 20 [default = 0];
    if (has_offset_of_longitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset_of_longitude());
    }

  }
  // repeated .OSM_PBF_FORMAT.Group group_list = 2;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Block*>(&from));
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_list()) {
      mutable_string_list()->::OSM_PBF_FORMAT::StringList::MergeFrom(from.string_list());
    }
    if (from.has_latlon_granularity()) {
      set_latlon_granularity(from.latlon_granularity());
    }
    if (from.has_offset_of_latitude()) {
      set_offset_of_latitude(from.offset_of_latitude());
    }
    if (from.has_offset_of_longitude()) {
      set_offset_of_longitude(from.offset_of_longitude());
    }
  }
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < group_list_size(); i++) {
    if (!this->group_list(i).IsInitialized()) return false;
  }
  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(string_list_, other->string_list_);
    group_list_.Swap(&other->group_list_);
    std::swap(latlon_granularity_, other->latlon_granularity_);
    std::swap(offset_of_latitude_, other->offset_of_latitude_);
    std::swap(offset_of_longitude_, other->offset_of_longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Block::GetTypeName() const {
  return "OSM_PBF_FORMAT.Block";
}


// ===================================================================

#ifndef _MSC_VER
const int StringList::kStringListFieldNumber;
#endif  // !_MSC_VER

StringList::StringList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StringList::InitAsDefaultInstance() {
}

StringList::StringList(const StringList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StringList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringList::~StringList() {
  SharedDtor();
}

void StringList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StringList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringList& StringList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

StringList* StringList::default_instance_ = NULL;

StringList* StringList::New() const {
  return new StringList;
}

void StringList::Clear() {
  string_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StringList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes string_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_string_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes string_list = 1;
  for (int i = 0; i < this->string_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->string_list(i), output);
  }

}

int StringList::ByteSize() const {
  int total_size = 0;

  // repeated bytes string_list = 1;
  total_size += 1 * this->string_list_size();
  for (int i = 0; i < this->string_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringList*>(&from));
}

void StringList::MergeFrom(const StringList& from) {
  GOOGLE_CHECK_NE(&from, this);
  string_list_.MergeFrom(from.string_list_);
}

void StringList::CopyFrom(const StringList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {

  return true;
}

void StringList::Swap(StringList* other) {
  if (other != this) {
    string_list_.Swap(&other->string_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StringList::GetTypeName() const {
  return "OSM_PBF_FORMAT.StringList";
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kSparseNodeListFieldNumber;
const int Group::kDenseNodeFieldNumber;
const int Group::kWayListFieldNumber;
const int Group::kRelationListFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Group::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dense_node_ = const_cast< ::OSM_PBF_FORMAT::DenseNode*>(
      ::OSM_PBF_FORMAT::DenseNode::internal_default_instance());
#else
  dense_node_ = const_cast< ::OSM_PBF_FORMAT::DenseNode*>(&::OSM_PBF_FORMAT::DenseNode::default_instance());
#endif
}

Group::Group(const Group& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  dense_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  SharedDtor();
}

void Group::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete dense_node_;
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Group& Group::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_dense_node()) {
      if (dense_node_ != NULL) dense_node_->::OSM_PBF_FORMAT::DenseNode::Clear();
    }
  }
  sparse_node_list_.Clear();
  way_list_.Clear();
  relation_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OSM_PBF_FORMAT.SparseNode sparse_node_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sparse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sparse_node_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sparse_node_list;
        if (input->ExpectTag(18)) goto parse_dense_node;
        break;
      }

      // optional .OSM_PBF_FORMAT.DenseNode dense_node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dense_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_way_list;
        break;
      }

      // repeated .OSM_PBF_FORMAT.Way way_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_way_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_way_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_way_list;
        if (input->ExpectTag(34)) goto parse_relation_list;
        break;
      }

      // repeated .OSM_PBF_FORMAT.Relation relation_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relation_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relation_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_relation_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OSM_PBF_FORMAT.SparseNode sparse_node_list = 1;
  for (int i = 0; i < this->sparse_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sparse_node_list(i), output);
  }

  // optional .OSM_PBF_FORMAT.DenseNode dense_node = 2;
  if (has_dense_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->dense_node(), output);
  }

  // repeated .OSM_PBF_FORMAT.Way way_list = 3;
  for (int i = 0; i < this->way_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->way_list(i), output);
  }

  // repeated .OSM_PBF_FORMAT.Relation relation_list = 4;
  for (int i = 0; i < this->relation_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->relation_list(i), output);
  }

}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .OSM_PBF_FORMAT.DenseNode dense_node = 2;
    if (has_dense_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dense_node());
    }

  }
  // repeated .OSM_PBF_FORMAT.SparseNode sparse_node_list = 1;
  total_size += 1 * this->sparse_node_list_size();
  for (int i = 0; i < this->sparse_node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sparse_node_list(i));
  }

  // repeated .OSM_PBF_FORMAT.Way way_list = 3;
  total_size += 1 * this->way_list_size();
  for (int i = 0; i < this->way_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->way_list(i));
  }

  // repeated .OSM_PBF_FORMAT.Relation relation_list = 4;
  total_size += 1 * this->relation_list_size();
  for (int i = 0; i < this->relation_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relation_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Group*>(&from));
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  sparse_node_list_.MergeFrom(from.sparse_node_list_);
  way_list_.MergeFrom(from.way_list_);
  relation_list_.MergeFrom(from.relation_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dense_node()) {
      mutable_dense_node()->::OSM_PBF_FORMAT::DenseNode::MergeFrom(from.dense_node());
    }
  }
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {

  for (int i = 0; i < sparse_node_list_size(); i++) {
    if (!this->sparse_node_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < way_list_size(); i++) {
    if (!this->way_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < relation_list_size(); i++) {
    if (!this->relation_list(i).IsInitialized()) return false;
  }
  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    sparse_node_list_.Swap(&other->sparse_node_list_);
    std::swap(dense_node_, other->dense_node_);
    way_list_.Swap(&other->way_list_);
    relation_list_.Swap(&other->relation_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Group::GetTypeName() const {
  return "OSM_PBF_FORMAT.Group";
}


// ===================================================================

#ifndef _MSC_VER
const int SparseNode::kOsmNodeIdFieldNumber;
const int SparseNode::kKeyFieldNumber;
const int SparseNode::kValueFieldNumber;
const int SparseNode::kLatitudeFieldNumber;
const int SparseNode::kLongitudeFieldNumber;
#endif  // !_MSC_VER

SparseNode::SparseNode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SparseNode::InitAsDefaultInstance() {
}

SparseNode::SparseNode(const SparseNode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SparseNode::SharedCtor() {
  _cached_size_ = 0;
  osm_node_id_ = GOOGLE_LONGLONG(0);
  latitude_ = GOOGLE_LONGLONG(0);
  longitude_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseNode::~SparseNode() {
  SharedDtor();
}

void SparseNode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SparseNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SparseNode& SparseNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

SparseNode* SparseNode::default_instance_ = NULL;

SparseNode* SparseNode::New() const {
  return new SparseNode;
}

void SparseNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osm_node_id_ = GOOGLE_LONGLONG(0);
    latitude_ = GOOGLE_LONGLONG(0);
    longitude_ = GOOGLE_LONGLONG(0);
  }
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SparseNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 osm_node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &osm_node_id_)));
          set_has_osm_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated uint32 key = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated uint32 value = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_latitude;
        break;
      }

      // required sint64 latitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_longitude;
        break;
      }

      // required sint64 longitude = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparseNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 osm_node_id = 1;
  if (has_osm_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->osm_node_id(), output);
  }

  // repeated uint32 key = 2 [packed = true];
  if (this->key_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_cached_byte_size_);
  }
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->key(i), output);
  }

  // repeated uint32 value = 3 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->value(i), output);
  }

  // required sint64 latitude = 8;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->latitude(), output);
  }

  // required sint64 longitude = 9;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->longitude(), output);
  }

}

int SparseNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 osm_node_id = 1;
    if (has_osm_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->osm_node_id());
    }

    // required sint64 latitude = 8;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->latitude());
    }

    // required sint64 longitude = 9;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->longitude());
    }

  }
  // repeated uint32 key = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->key(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 value = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SparseNode*>(&from));
}

void SparseNode::MergeFrom(const SparseNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osm_node_id()) {
      set_osm_node_id(from.osm_node_id());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
}

void SparseNode::CopyFrom(const SparseNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void SparseNode::Swap(SparseNode* other) {
  if (other != this) {
    std::swap(osm_node_id_, other->osm_node_id_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SparseNode::GetTypeName() const {
  return "OSM_PBF_FORMAT.SparseNode";
}


// ===================================================================

#ifndef _MSC_VER
const int DenseNode::kDeltaCodedOsmNodeIdFieldNumber;
const int DenseNode::kDeltaCodedLatitudeFieldNumber;
const int DenseNode::kDeltaCodedLongitudeFieldNumber;
const int DenseNode::kKeyValuePairsFieldNumber;
#endif  // !_MSC_VER

DenseNode::DenseNode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DenseNode::InitAsDefaultInstance() {
}

DenseNode::DenseNode(const DenseNode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DenseNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseNode::~DenseNode() {
  SharedDtor();
}

void DenseNode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DenseNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DenseNode& DenseNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

DenseNode* DenseNode::default_instance_ = NULL;

DenseNode* DenseNode::New() const {
  return new DenseNode;
}

void DenseNode::Clear() {
  delta_coded_osm_node_id_.Clear();
  delta_coded_latitude_.Clear();
  delta_coded_longitude_.Clear();
  key_value_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DenseNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 delta_coded_osm_node_id = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_delta_coded_osm_node_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 10, input, this->mutable_delta_coded_osm_node_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_delta_coded_latitude;
        break;
      }

      // repeated sint64 delta_coded_latitude = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delta_coded_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_delta_coded_latitude())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 66, input, this->mutable_delta_coded_latitude())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_delta_coded_longitude;
        break;
      }

      // repeated sint64 delta_coded_longitude = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delta_coded_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_delta_coded_longitude())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 74, input, this->mutable_delta_coded_longitude())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_key_value_pairs;
        break;
      }

      // repeated int32 key_value_pairs = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_value_pairs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_key_value_pairs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82, input, this->mutable_key_value_pairs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DenseNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 delta_coded_osm_node_id = 1 [packed = true];
  if (this->delta_coded_osm_node_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_delta_coded_osm_node_id_cached_byte_size_);
  }
  for (int i = 0; i < this->delta_coded_osm_node_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->delta_coded_osm_node_id(i), output);
  }

  // repeated sint64 delta_coded_latitude = 8 [packed = true];
  if (this->delta_coded_latitude_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_delta_coded_latitude_cached_byte_size_);
  }
  for (int i = 0; i < this->delta_coded_latitude_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->delta_coded_latitude(i), output);
  }

  // repeated sint64 delta_coded_longitude = 9 [packed = true];
  if (this->delta_coded_longitude_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_delta_coded_longitude_cached_byte_size_);
  }
  for (int i = 0; i < this->delta_coded_longitude_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->delta_coded_longitude(i), output);
  }

  // repeated int32 key_value_pairs = 10 [packed = true];
  if (this->key_value_pairs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_value_pairs_cached_byte_size_);
  }
  for (int i = 0; i < this->key_value_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->key_value_pairs(i), output);
  }

}

int DenseNode::ByteSize() const {
  int total_size = 0;

  // repeated sint64 delta_coded_osm_node_id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->delta_coded_osm_node_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->delta_coded_osm_node_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _delta_coded_osm_node_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 delta_coded_latitude = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->delta_coded_latitude_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->delta_coded_latitude(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _delta_coded_latitude_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 delta_coded_longitude = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->delta_coded_longitude_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->delta_coded_longitude(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _delta_coded_longitude_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 key_value_pairs = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->key_value_pairs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->key_value_pairs(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_value_pairs_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DenseNode*>(&from));
}

void DenseNode::MergeFrom(const DenseNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  delta_coded_osm_node_id_.MergeFrom(from.delta_coded_osm_node_id_);
  delta_coded_latitude_.MergeFrom(from.delta_coded_latitude_);
  delta_coded_longitude_.MergeFrom(from.delta_coded_longitude_);
  key_value_pairs_.MergeFrom(from.key_value_pairs_);
}

void DenseNode::CopyFrom(const DenseNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseNode::IsInitialized() const {

  return true;
}

void DenseNode::Swap(DenseNode* other) {
  if (other != this) {
    delta_coded_osm_node_id_.Swap(&other->delta_coded_osm_node_id_);
    delta_coded_latitude_.Swap(&other->delta_coded_latitude_);
    delta_coded_longitude_.Swap(&other->delta_coded_longitude_);
    key_value_pairs_.Swap(&other->key_value_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DenseNode::GetTypeName() const {
  return "OSM_PBF_FORMAT.DenseNode";
}


// ===================================================================

#ifndef _MSC_VER
const int Way::kOsmWayIdFieldNumber;
const int Way::kKeyFieldNumber;
const int Way::kValueFieldNumber;
const int Way::kNodeListFieldNumber;
#endif  // !_MSC_VER

Way::Way()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Way::InitAsDefaultInstance() {
}

Way::Way(const Way& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Way::SharedCtor() {
  _cached_size_ = 0;
  osm_way_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Way::~Way() {
  SharedDtor();
}

void Way::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Way::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Way& Way::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

Way* Way::default_instance_ = NULL;

Way* Way::New() const {
  return new Way;
}

void Way::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osm_way_id_ = GOOGLE_LONGLONG(0);
  }
  key_.Clear();
  value_.Clear();
  node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Way::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 osm_way_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &osm_way_id_)));
          set_has_osm_way_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated uint32 key = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated uint32 value = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_node_list;
        break;
      }

      // repeated sint64 node_list = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_node_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 66, input, this->mutable_node_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Way::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 osm_way_id = 1;
  if (has_osm_way_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->osm_way_id(), output);
  }

  // repeated uint32 key = 2 [packed = true];
  if (this->key_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_cached_byte_size_);
  }
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->key(i), output);
  }

  // repeated uint32 value = 3 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->value(i), output);
  }

  // repeated sint64 node_list = 8 [packed = true];
  if (this->node_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_node_list_cached_byte_size_);
  }
  for (int i = 0; i < this->node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->node_list(i), output);
  }

}

int Way::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 osm_way_id = 1;
    if (has_osm_way_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->osm_way_id());
    }

  }
  // repeated uint32 key = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->key(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 value = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 node_list = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->node_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->node_list(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _node_list_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Way::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Way*>(&from));
}

void Way::MergeFrom(const Way& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  node_list_.MergeFrom(from.node_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osm_way_id()) {
      set_osm_way_id(from.osm_way_id());
    }
  }
}

void Way::CopyFrom(const Way& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Way::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Way::Swap(Way* other) {
  if (other != this) {
    std::swap(osm_way_id_, other->osm_way_id_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    node_list_.Swap(&other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Way::GetTypeName() const {
  return "OSM_PBF_FORMAT.Way";
}


// ===================================================================

bool Relation_MemberType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Relation_MemberType Relation::node;
const Relation_MemberType Relation::way;
const Relation_MemberType Relation::relation;
const Relation_MemberType Relation::MemberType_MIN;
const Relation_MemberType Relation::MemberType_MAX;
const int Relation::MemberType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Relation::kOsmRelationIdFieldNumber;
const int Relation::kKeyFieldNumber;
const int Relation::kValueFieldNumber;
const int Relation::kMemberRoleIdFieldNumber;
const int Relation::kDeltaCodedMemberIdListFieldNumber;
const int Relation::kMemberTypeListFieldNumber;
#endif  // !_MSC_VER

Relation::Relation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Relation::InitAsDefaultInstance() {
}

Relation::Relation(const Relation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Relation::SharedCtor() {
  _cached_size_ = 0;
  osm_relation_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation::~Relation() {
  SharedDtor();
}

void Relation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Relation& Relation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_osmpbfformat_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_osmpbfformat_2eproto();
#endif
  return *default_instance_;
}

Relation* Relation::default_instance_ = NULL;

Relation* Relation::New() const {
  return new Relation;
}

void Relation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osm_relation_id_ = GOOGLE_LONGLONG(0);
  }
  key_.Clear();
  value_.Clear();
  member_role_id_.Clear();
  delta_coded_member_id_list_.Clear();
  member_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 osm_relation_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &osm_relation_id_)));
          set_has_osm_relation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated uint32 key = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated uint32 value = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_member_role_id;
        break;
      }

      // repeated int32 member_role_id = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_member_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_member_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_delta_coded_member_id_list;
        break;
      }

      // repeated sint64 delta_coded_member_id_list = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delta_coded_member_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_delta_coded_member_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 74, input, this->mutable_delta_coded_member_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_member_type_list;
        break;
      }

      // repeated .OSM_PBF_FORMAT.Relation.MemberType member_type_list = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_type_list:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::OSM_PBF_FORMAT::Relation_MemberType_IsValid(value)) {
              add_member_type_list(static_cast< ::OSM_PBF_FORMAT::Relation_MemberType >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OSM_PBF_FORMAT::Relation_MemberType_IsValid(value)) {
            add_member_type_list(static_cast< ::OSM_PBF_FORMAT::Relation_MemberType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 osm_relation_id = 1;
  if (has_osm_relation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->osm_relation_id(), output);
  }

  // repeated uint32 key = 2 [packed = true];
  if (this->key_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_cached_byte_size_);
  }
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->key(i), output);
  }

  // repeated uint32 value = 3 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->value(i), output);
  }

  // repeated int32 member_role_id = 8 [packed = true];
  if (this->member_role_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_member_role_id_cached_byte_size_);
  }
  for (int i = 0; i < this->member_role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->member_role_id(i), output);
  }

  // repeated sint64 delta_coded_member_id_list = 9 [packed = true];
  if (this->delta_coded_member_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_delta_coded_member_id_list_cached_byte_size_);
  }
  for (int i = 0; i < this->delta_coded_member_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->delta_coded_member_id_list(i), output);
  }

  // repeated .OSM_PBF_FORMAT.Relation.MemberType member_type_list = 10 [packed = true];
  if (this->member_type_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_member_type_list_cached_byte_size_);
  }
  for (int i = 0; i < this->member_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->member_type_list(i), output);
  }

}

int Relation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 osm_relation_id = 1;
    if (has_osm_relation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->osm_relation_id());
    }

  }
  // repeated uint32 key = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->key(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 value = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 member_role_id = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->member_role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->member_role_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _member_role_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 delta_coded_member_id_list = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->delta_coded_member_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->delta_coded_member_id_list(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _delta_coded_member_id_list_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .OSM_PBF_FORMAT.Relation.MemberType member_type_list = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->member_type_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->member_type_list(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _member_type_list_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Relation*>(&from));
}

void Relation::MergeFrom(const Relation& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  member_role_id_.MergeFrom(from.member_role_id_);
  delta_coded_member_id_list_.MergeFrom(from.delta_coded_member_id_list_);
  member_type_list_.MergeFrom(from.member_type_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osm_relation_id()) {
      set_osm_relation_id(from.osm_relation_id());
    }
  }
}

void Relation::CopyFrom(const Relation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Relation::Swap(Relation* other) {
  if (other != this) {
    std::swap(osm_relation_id_, other->osm_relation_id_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    member_role_id_.Swap(&other->member_role_id_);
    delta_coded_member_id_list_.Swap(&other->delta_coded_member_id_list_);
    member_type_list_.Swap(&other->member_type_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Relation::GetTypeName() const {
  return "OSM_PBF_FORMAT.Relation";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OSM_PBF_FORMAT

// @@protoc_insertion_point(global_scope)
